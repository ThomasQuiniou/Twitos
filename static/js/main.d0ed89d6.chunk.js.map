{"version":3,"sources":["components/Header.js","api/TouitApi.js","components/Touit.js","components/TouitContainer.js","components/Trending.js","components/SendMessageForm.js","components/Comments.js","components/Modale.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","React","Component","TouitApi","timestamp","callback","request","XMLHttpRequest","open","encodeURIComponent","addEventListener","readyState","DONE","status","response","JSON","parse","responseText","send","name","message","onSuccess","onError","httpResquest","hasOwnProperty","error","setRequestHeader","id","fetch","then","data","json","idTouit","message_id","comment","Touit","setStateAffichageModale","props","changeStateHandler","likeTouit","console","log","like","dislikeTouit","dislike","color","i","Math","floor","random","this","style","backgroundColor","getRandomColor","onClick","bind","TouitContainer","changeState","state","lastTimestamp","intervalId","setInterval","list","resp","messages","length","setState","result","ts","clearInterval","sort","a","b","map","obj","key","Trending","getTrending","Object","entries","value","words","word","SendMessageForm","inputChange","ev","target","handleSubmit","event","post","alert","msg","preventDefault","onSubmit","type","onChange","Comments","Modale","postComment","getComments","r","comments","closeModale","likes","resultComments","index","App","changeStateModale","getOnetouit","modale","finally","modaleIsVisible","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0ed89d6.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nclass Header extends React.Component{\n\n    render(){\n        return(\n            <header>\n                <div className=\"container\">\n                    <h1>Twitter pour Ã©pileptique</h1>\n                </div>\n            </header>\n        )\n    }\n}\nexport default Header;","class TouitApi{\n\n\n    static list(timestamp, callback) {\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", \"http://touiteur.cefim-formation.org/list?ts=\" + encodeURIComponent(timestamp), true);\n        request.addEventListener(\"readystatechange\", () => {\n            if (request.readyState === XMLHttpRequest.DONE) {\n                if (request.status === 200) {\n                    const response = JSON.parse(request.responseText);\n                    callback(response);\n                } else {\n                    // Erreur HTTP\n                }\n            }\n        });\n        request.send();\n    }\n\n    static post(name, message, onSuccess, onError){\n        let httpResquest = new XMLHttpRequest();\n        httpResquest.open('POST', 'http://touiteur.cefim-formation.org/send', true);\n        httpResquest.addEventListener('readystatechange', () => {\n            if (httpResquest.readyState === XMLHttpRequest.DONE) {\n                if (httpResquest.status === 200) {\n                    const response = JSON.parse(httpResquest.responseText);\n                    if (response.hasOwnProperty(\"success\")) {\n                        onSuccess(response)\n                    } else if (response.hasOwnProperty(\"error\")) {\n                        onError(response.error)\n                    } else {\n                        onError('Erreur inconnu')\n                    }\n                }\n            }\n        })\n        httpResquest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        httpResquest.send('name=' + encodeURIComponent(name)  + '&message=' + message);\n    }\n\n    static getTrending(callback) {\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", \"http://touiteur.cefim-formation.org/trending\", true);\n        request.addEventListener(\"readystatechange\", () => {\n            if (request.readyState === XMLHttpRequest.DONE) {\n                if (request.status === 200) {\n                    const response = JSON.parse(request.responseText);\n                    callback(response);\n                } else {\n                    // Erreur HTTP\n                }\n            }\n        });\n        request.send();\n    }\n\n    static getOnetouit(id){\n        return fetch('http://touiteur.cefim-formation.org/get?id=' + encodeURIComponent(id) )\n            .then(data => data.json())\n\n    }\n\n    static getComments(id){\n        return fetch('http://touiteur.cefim-formation.org/comments/list?message_id=' + encodeURIComponent(id))\n            .then(data => data.json())\n    }\n    static like(idTouit){\n        let httpResquest = new XMLHttpRequest();\n        let url = 'http://touiteur.cefim-formation.org/likes/send'\n        httpResquest.open('PUT', url, true);\n        httpResquest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        httpResquest.send(\"message_id=\"   + encodeURIComponent(idTouit));\n    }\n    static dislike(idTouit){\n        let httpResquest = new XMLHttpRequest();\n        let url = 'http://touiteur.cefim-formation.org/likes/remove'\n        httpResquest.open('DELETE', url, true);\n        httpResquest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        httpResquest.send(\"message_id=\"   + encodeURIComponent(idTouit));\n    }\n    static postComment(message_id, name, comment, onSuccess, onError){\n        const httpResquest = new XMLHttpRequest();\n        httpResquest.open('POST', 'http://touiteur.cefim-formation.org/comments/send', true);\n        httpResquest.addEventListener('readystatechange', () => {\n            if (httpResquest.readyState === XMLHttpRequest.DONE) {\n                if (httpResquest.status === 200) {\n                    const response = JSON.parse(httpResquest.responseText);\n                    if (response.hasOwnProperty(\"success\")) {\n                        onSuccess(response)\n                    } else if (response.hasOwnProperty(\"error\")) {\n                        onError(response.error)\n                    } else {\n                        onError('Erreur inconnu')\n                    }\n                }\n            }\n        })\n        httpResquest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        httpResquest.send('name=' + encodeURIComponent(name)  + '&message_id=' + message_id + '&comment=' + comment);\n    }\n}\nexport default TouitApi","import React from \"react\";\nimport './Touit.css';\nimport TouitApi from \"../api/TouitApi\";\nclass Touit extends React.Component{\n\n\n    getRandomColor() {\n        let letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    setStateAffichageModale = (id) =>{\n\n        this.props.changeStateHandler(id)\n    }\n    likeTouit = (id) =>{\n        console.log(id, \"the id of twit liker\")\n        TouitApi.like(id)\n    }\n    dislikeTouit = (id) =>{\n        TouitApi.dislike(id)\n    }\n\n    render(){\n        const {id, name, message} = this.props\n        return(\n            <div style={{ backgroundColor: this.getRandomColor()}} className=\"touit\">\n                <p className=\"touit-name\">{name}</p>\n                <p className=\"touit-message\">{message}</p>\n                <button onClick={this.setStateAffichageModale.bind(this, id)}>go</button>\n                <button onClick={this.likeTouit.bind(this, id)}>Like</button>\n                <button onClick={this.dislikeTouit.bind(this, id)}>Dislike</button>\n            </div>\n        )\n    }\n}\nexport default Touit","import React from \"react\";\nimport TouitApi from \"../api/TouitApi\";\nimport Touit from \"./Touit\";\nimport './TouitContainer.css'\n\nclass TouitContainer extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            'result': []\n        }\n        this.lastTimestamp = 0;\n        this.intervalId = false\n    }\n    // s'Ã©xÃ©cute a la crÃ©ation du composant, lance un set interval\n    // s'effectuant toutes les 1,5 secondes qui met Ã  jour le composant si le nombre de resultat\n    // a changer dans la base de l'API\n    componentDidMount(){\n        this.intervalId = setInterval(() => {\n            TouitApi.list(this.lastTimestamp, resp => {\n                if(resp.messages.length > 0){\n                    this.setState({\n                        \"result\": [...this.state.result, ...resp.messages]\n                    });\n                }\n                this.lastTimestamp = resp.ts;\n            });\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        if(this.intervalId !== false){\n            clearInterval(this.intervalId)\n        }\n    }\n\n    changeState = (id) => {\n\n        this.props.changeStateHandler(id)\n    }\n    //map sur le state result pour crÃ©er autant de composant touit que de rÃ©sultat dans la base de l'api\n    render(){\n        return(\n            <section className=\"touit-container\">\n                <div className=\"container\">\n                    { this.state.result\n                        .sort((a, b) => b.ts - a.ts)\n                        .map((obj) => <Touit changeStateHandler={this.changeState} {...obj} key={obj.id}/> ) }\n                </div>\n            </section>\n        )\n    }\n}\nexport default TouitContainer","import React from \"react\";\nimport TouitApi from \"../api/TouitApi\";\nimport './Trending.css'\n\nclass Trending extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"words\": []\n        }\n\n    }\n    componentDidMount() {\n        TouitApi.getTrending(resp => {\n            this.setState({\n                \"words\": Object.entries(resp)\n                    .map(([k, v]) => ({\"key\": k, \"value\": v}))\n                    .sort((a, b) => b.value - a.value)\n            });\n        });\n    }\n\n    render(){\n        return(\n            <section className=\"trending\">\n                {\n                    this.state.words.map(word => <p key={word.key}>{word.key}</p>)\n                }\n            </section>\n        )\n\n    }\n}\nexport default Trending","import React from 'react';\nimport TouitApi from \"../api/TouitApi\";\nimport Trending from \"./Trending\";\nimport './SendMessageForm.css'\n\nclass SendMessageForm extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {name: '', message: ''};\n    }\n\n\n    inputChange = ev => {\n        this.setState({\n            [ev.target.name]: ev.target.value\n        })\n    }\n\n\n    handleSubmit = (event) => {\n        TouitApi.post(\n            this.state.name,\n            this.state.message,\n            () => {\n                this.setState({name: '', message: ''})\n                alert('Votre message est bien envoyÃ©')\n            },\n            msg => {\n                alert(\"Une erreur est survenue : \" + msg + \" !\");\n            })\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <section className=\"formulaire\">\n                <div className=\"container\">\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Nom :\n                        </label>\n                        <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.inputChange} />\n\n                        <label>\n                            Votre touit:\n                        </label>\n                        <textarea name=\"message\" value={this.state.message} onChange={this.inputChange} />\n                        <input className=\"button-submit\" type=\"submit\" value=\"Envoyer\" />\n                    </form>\n                    <Trending/>\n                </div>\n\n            </section>\n\n        );\n    }\n}\nexport default SendMessageForm;","import React from \"react\";\nimport TouitApi from \"../api/TouitApi\";\nclass Comments  extends React.Component{\n    constructor(props) {\n        super(props);\n\n    }\n    render(){\n        const{name, comment} = this.props\n\n        return(\n            <section className=\"commentaires\">\n                <div>{name} : {comment} </div>\n            </section>\n        )\n    }\n\n}\nexport default Comments;","import React from \"react\";\nimport TouitApi from \"../api/TouitApi\";\nimport Comments from \"./Comments\";\nimport './Modale.css'\n\nclass Modale extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"resultComments\": [],\n            \"message_id\": '',\n            \"name\": '',\n            \"comment\": '',\n        }\n    }\n    inputChange = ev => {\n        this.setState({\n            [ev.target.name]: ev.target.value\n        })\n    }\n\n\n    handleSubmit = (event) => {\n        TouitApi.postComment(\n            this.props.id,\n            this.state.name,\n            this.state.comment,\n            () => {\n                this.setState({message_id: '', name: '', comment: ''})\n                TouitApi.getComments(this.props.id).then( r => this.setState({'resultComments':r.comments}))\n                alert('Votre message est bien envoyÃ©')\n            },\n            msg => {\n                alert(\"Une erreur est survenue : \" + msg + \" !\");\n            })\n        event.preventDefault();\n    }\n\n    componentDidMount() {\n        TouitApi.getComments(this.props.id).then( r => this.setState({'resultComments':r.comments}))\n    }\n\n\n\n    closeModale = () => {\n            this.props.changeStateHandler()\n    }\n\n\n    render(){\n        const{message, name, likes} = this.props\n        return(\n            <section className=\"modale-background\">\n                <div className=\"modale\">\n\n                    <p>Auteur : {name}</p>\n                    <p>Message : {message}</p>\n                    <p>{likes} likes</p>\n                    {\n                        this.state.resultComments.length > 0 &&\n                        <p>Commentaires : </p>\n                    }\n                    {\n                        this.state.resultComments.map((obj, index) => <Comments key={index} {...obj}/>)\n                    }\n\n\n\n                    <button onClick={this.closeModale}>X</button>\n\n\n\n                    <section className=\"formulaire-comments\">\n                        <div className=\"container-comments\">\n                            <form onSubmit={this.handleSubmit}>\n                                <label>\n                                    Nom :\n                                </label>\n                                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.inputChange} />\n\n                                <label>\n                                    Votre touit:\n                                </label>\n                                <textarea name=\"comment\" value={this.state.comment} onChange={this.inputChange} />\n                                <input className=\"button-submit\" type=\"submit\" value=\"Envoyer\" />\n                            </form>\n                        </div>\n\n                    </section>\n                </div>\n\n\n            </section>\n\n        )\n    }\n}\nexport default Modale","import React from \"react\";\nimport Header from \"./components/Header\";\nimport TouitContainer from \"./components/TouitContainer\";\nimport SendMessageForm from \"./components/SendMessageForm\";\nimport Modale from \"./components/Modale\";\nimport TouitApi from \"./api/TouitApi\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            \"modaleIsVisible\": false,\n        }\n\n    }\n\n    changeStateModale = (id) => {\n        TouitApi.getOnetouit(id).then(r => this.modale = r.data).finally(() =>{\n            this.setState({\n                \"modaleIsVisible\": !this.state.modaleIsVisible,\n            })\n        })\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <Header/>\n                {this.state.modaleIsVisible && <Modale changeStateHandler = {this.changeStateModale} {...this.modale}/>}\n                <SendMessageForm/>\n                <TouitContainer changeStateHandler = {this.changeStateModale} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}